package com.inducesmile.androidtranslation.texttranslation;

import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.text.TextUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.Toast;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.inducesmile.androidtranslation.R;
import com.inducesmile.androidtranslation.repository.api.model.YandexResponse;
import com.inducesmile.androidtranslation.repository.database.model.TranslationObject;
import com.inducesmile.androidtranslation.texttranslation.dialog.SaveDialog;
import com.inducesmile.androidtranslation.utils.CommonUtils;
import com.inducesmile.androidtranslation.utils.Constants;
import com.inducesmile.androidtranslation.utils.CopyPasteText;
import com.inducesmile.androidtranslation.utils.ShareUtils;
import com.inducesmile.androidtranslation.utils.TextToVoice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Objects;

import javax.inject.Inject;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.lifecycle.Observer;
import dagger.android.AndroidInjection;

public class TextTranslationActivity extends AppCompatActivity implements View.OnClickListener{

    private static final String TAG = TextTranslationActivity.class.getSimpleName();


    private AppCompatEditText mOriginalText;
    private AppCompatTextView mTranslatedText;

    private ConstraintLayout mLayout;

    private String originalText = "";
    private String translatedText = "";
    private String transAbbr = "en";
    private String origAbbr = "en";

    private FloatingActionButton pasteText, deleteText, speakText, readText, copyText, shareText,
                                 favoriteText, translateReadText, convertText;

    private TextToSpeech tts;

    private ProgressDialog mProgressDialog;

    private CopyPasteText copyPasteText;

    private Spinner spinner, translationSpinner;

    @Inject
    TextTranslationViewModel textTranslationViewModel;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_text_translation);

        setTitle("");
        AndroidInjection.inject(this);

        copyPasteText = new CopyPasteText(this);

        mOriginalText = (AppCompatEditText)findViewById(R.id.original_text_et);
        mTranslatedText = (AppCompatTextView)findViewById(R.id.translated_text_tv);

        pasteText = (FloatingActionButton)findViewById(R.id.paste_btn);
        deleteText = (FloatingActionButton)findViewById(R.id.cancel_btn);
        speakText = (FloatingActionButton)findViewById(R.id.voice_to_text_btn);
        readText = (FloatingActionButton)findViewById(R.id.read_aloud_original_btn);

        copyText = (FloatingActionButton)findViewById(R.id.copy_translation_btn);
        shareText = (FloatingActionButton)findViewById(R.id.share_translation_btn);
        favoriteText = (FloatingActionButton)findViewById(R.id.like_btn);
        translateReadText = (FloatingActionButton)findViewById(R.id.read_aloud_translation_btn);

        convertText = (FloatingActionButton)findViewById(R.id.translate_text__btn);

        pasteText.setOnClickListener(this);
        deleteText.setOnClickListener(this);
        speakText.setOnClickListener(this);
        readText.setOnClickListener(this);

        copyText.setOnClickListener(this);
        shareText.setOnClickListener(this);
        favoriteText.setOnClickListener(this);
        translateReadText.setOnClickListener(this);

        convertText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String userTextInput = getOriginalText();
                List<String> list = Arrays.asList(Constants.YANDEX_TRANSLATE_ABBR);
                if(TextUtils.isEmpty(userTextInput)){
                    Toast.makeText(TextTranslationActivity.this, "Content to translate cannot be empty ...", Toast.LENGTH_SHORT).show();
                }else if(TextUtils.isEmpty(transAbbr)){
                    Toast.makeText(TextTranslationActivity.this, "Target Language is empty", Toast.LENGTH_SHORT).show();
                }
                else if(!list.contains(transAbbr)) {
                    Toast.makeText(TextTranslationActivity.this, "Target Language was not field", Toast.LENGTH_SHORT).show();
                }else {
                    textTranslationViewModel.makeApiTranslationCall(userTextInput, transAbbr);
                }
            }
        });

        watchTranslatedText();
    }


    //Watch translated text for change
    private void watchTranslatedText(){
        textTranslationViewModel.getYandexResponse().observe(this, new Observer<YandexResponse>() {
            @Override
            public void onChanged(YandexResponse yandexResponse) {
                if (yandexResponse != null) {
                    translatedText = String.valueOf(yandexResponse.getText());
                    translatedText = translatedText.replaceAll("\\p{P}", "");
                    mTranslatedText.setText(translatedText);
                }
            }
        });
    }

    private boolean isOriginalTextExist(){
        String textContent = Objects.requireNonNull(mOriginalText.getText()).toString();
        return TextUtils.isEmpty(textContent);
    }

    private boolean isTranslatedTextExist(){
        String textContent = Objects.requireNonNull(mTranslatedText.getText()).toString();
        return TextUtils.isEmpty(textContent);
    }


    private String getOriginalText(){
        return Objects.requireNonNull(mOriginalText.getText()).toString();
    }


    private String getTranslatedText(){
        return Objects.requireNonNull(mTranslatedText.getText()).toString();
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.text_translate_menu, menu);

        MenuItem item = menu.findItem(R.id.original_lang_spinner);
        populateFirstSpinner(item);

        MenuItem item2 = menu.findItem(R.id.translate_lang_spinner);
        populateSecondSpinner(item2);

        return super.onCreateOptionsMenu(menu);
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int clickItem = item.getItemId();
        if(clickItem == R.id.switch_item){

            //Switch selected language
            String firstText = (String)spinner.getSelectedItem();
            String secondText = (String)translationSpinner.getSelectedItem();
            int firstIndex = CommonUtils.getLanguageIndexPosition(firstText);
            int secondIndex = CommonUtils.getLanguageIndexPosition(secondText);

            spinner.setSelection(secondIndex);
            translationSpinner.setSelection(firstIndex);

            // switch language abbreviation
            String tempAbbreviation = origAbbr;
            transAbbr = origAbbr;
            origAbbr = tempAbbreviation;

            //switching text content
            mOriginalText.setText(getTranslatedText());
            mTranslatedText.setText(getOriginalText());


        }
        return super.onOptionsItemSelected(item);
    }



    //Language option for original text
    private void populateFirstSpinner(MenuItem item){
        spinner = (Spinner) item.getActionView();
        ArrayAdapter<String> languageAdapter = new ArrayAdapter<String>(this, R.layout.custom_spinner_item, CommonUtils.sortedListString());

        languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(languageAdapter);
        spinner.setSelection(CommonUtils.getEnglishLanguagePosition());

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long l) {
                String item = parent.getItemAtPosition(position).toString();

                int index = Arrays.asList(Constants.YANDEX_TRANSLATE_SUPPORTED_LANGUAGE).indexOf(item);
                origAbbr = Constants.YANDEX_TRANSLATE_ABBR[index];
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }


    //Language option for translation
    private void populateSecondSpinner(MenuItem item){
        translationSpinner = (Spinner) item.getActionView();
        ArrayAdapter<String> translationAdapter = new ArrayAdapter<String>(this, R.layout.custom_spinner_item, CommonUtils.sortedListString());

        translationAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        translationSpinner.setAdapter(translationAdapter);
        translationSpinner.setSelection(CommonUtils.getEnglishLanguagePosition());

        translationSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long l) {
                String item = parent.getItemAtPosition(position).toString();

                int index = Arrays.asList(Constants.YANDEX_TRANSLATE_SUPPORTED_LANGUAGE).indexOf(item);
                transAbbr = Constants.YANDEX_TRANSLATE_ABBR[index];
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    
    //All button options used in the translation app
    @Override
    public void onClick(View v) {
        FloatingActionButton floatingActionButton = (FloatingActionButton)v;
        int buttonId = floatingActionButton.getId();

        switch (buttonId){
            //paste translation text
            case R.id.paste_btn:
                String copiedContext = copyPasteText.pasteTextContent();
                if(TextUtils.isEmpty(copiedContext)){
                    Toast.makeText(TextTranslationActivity.this, "Paste content is empty ", Toast.LENGTH_SHORT).show();
                }else{
                    mOriginalText.setText(copiedContext);
                }
                break;
                //Delete translation text
            case R.id.cancel_btn:
                mOriginalText.setText("");
                break;
                //context translation text to voice
            case R.id.voice_to_text_btn:
                askSpeechInput();
                break;
                //text to sppech
            case R.id.read_aloud_original_btn:
                if(isOriginalTextExist()){
                    Toast.makeText(TextTranslationActivity.this, "Text is empty ", Toast.LENGTH_SHORT).show();
                }else{
                    TextToVoice textToVoice = new TextToVoice(TextTranslationActivity.this);
                    textToVoice.turnTextToSpeech(getOriginalText());
                }
                break;
                //copy translation text
            case R.id.copy_translation_btn:
                if(isTranslatedTextExist()){
                    Toast.makeText(TextTranslationActivity.this, "Translation text is empty ", Toast.LENGTH_SHORT).show();
                }else{
                    copyPasteText.copyTextContent(getTranslatedText());
                }
                break;
                //share translation text
            case R.id.share_translation_btn:
                ShareUtils.shareTranslatedText(TextTranslationActivity.this, getOriginalText(), getTranslatedText());
                break;
            case R.id.like_btn:
                //The like id was changed to save.
                if(TextUtils.isEmpty(getOriginalText()) || TextUtils.isEmpty(getTranslatedText())){
                    Toast.makeText(TextTranslationActivity.this, "Translation text is empty ", Toast.LENGTH_SHORT).show();
                }else{
                    SaveDialog deleteDialog = new SaveDialog(TextTranslationActivity.this);
                    TranslationObject saveObject = new TranslationObject(getOriginalText(), getTranslatedText());
                    deleteDialog.addNewMessage(textTranslationViewModel, saveObject);
                }

                break;
            case R.id.read_aloud_translation_btn:
                if (isTranslatedTextExist()) {
                    Toast.makeText(TextTranslationActivity.this, "Text is empty ", Toast.LENGTH_SHORT).show();
                } else {
                    TextToVoice textToVoice = new TextToVoice(TextTranslationActivity.this);
                    textToVoice.turnTextToSpeech(getTranslatedText());
                }
                break;
                default:
                    break;
        }
    }


    //Android speech input
    private void askSpeechInput() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Hi speak something");
        try {
            startActivityForResult(intent, Constants.REQ_CODE_SPEECH_INPUT);
        } catch (ActivityNotFoundException a) {
            Log.d(TAG, "Error " + a.getMessage());
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        switch (requestCode) {
            case Constants.REQ_CODE_SPEECH_INPUT: {
                if (resultCode == RESULT_OK && null != data) {
                    ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                    mOriginalText.setText(result.get(0));
                }
                break;
            }
        }
    }

}